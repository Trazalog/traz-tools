<data enableBatchRequests="true" enableBoxcarring="true" name="ALMDataService" transports="http https local">
  <config enableOData="false" id="ToolsDataSource">
    <property name="carbon_datasource_name">ToolsDataSource</property>
  </config>
  <resource method="GET" path="/articulos/{empr_id}">
    <call-query href="getArticulos">
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/pedidos">
    <call-query href="setPedido">
      <with-param name="fecha" query-param="fecha" />
      <with-param name="justificacion" query-param="justificacion" />
      <with-param name="case_id" query-param="case_id" />
      <with-param name="estado" query-param="estado" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="batch_id" query-param="batch_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/pedidos/detalle">
    <call-query href="setDetallePedido">
      <with-param name="cantidad" query-param="cantidad" />
      <with-param name="pema_id" query-param="pema_id" />
      <with-param name="arti_id" query-param="arti_id" />
    </call-query>
  </resource>
  <resource method="DELETE" path="/pedidos/detalle">
    <call-query href="deleteDetalle">
      <with-param name="pema_id" query-param="pema_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/pedidos/{pema_id}/{empr_id}">
    <call-query href="getPedido">
      <with-param name="pema_id" query-param="pema_id" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/pedidos/batch/{batch_id}">
    <call-query href="getPedidoXBatch">
      <with-param name="batch_id" query-param="batch_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/establecimiento">
    <call-query href="getEstablecimiento" />
  </resource>
  <resource method="GET" path="/lote/{esta_id}">
    <call-query href="getLote">
      <with-param name="esta_id" query-param="esta_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/articulos">
    <call-query href="getArticulos2" />
  </resource>
  <resource method="GET" path="/articulos/obtener/{arti_id}">
    <call-query href="getArticulo">
      <with-param name="arti_id" query-param="arti_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/articulo">
    <call-query href="setArticulo">
      <with-param name="barcode" query-param="barcode" />
      <with-param name="descripcion" query-param="descripcion" />
      <with-param name="es_caja" query-param="es_caja" />
      <with-param name="cantidad_caja" query-param="cantidad_caja" />
      <with-param name="punto_pedido" query-param="punto_pedido" />
      <with-param name="estado" query-param="estado" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="es_loteado" query-param="es_loteado" />
      <with-param name="tiar_id" query-param="tiar_id" />
      <with-param name="unme_id" query-param="unme_id" />
      <with-param name="inte_id" query-param="inte_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/notapedido">
    <call-query href="setNotaPedido">
      <with-param name="fecha" query-param="fecha" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="batch_id" query-param="batch_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/articulo/info/{arti_id}">
    <call-query href="getArticuloPorId">
      <with-param name="arti_id" query-param="arti_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/pedidoMateriales/{case_id}">
    <call-query href="getinfoPedMatPorCaseId">
      <with-param name="case_id" query-param="case_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/extraer_cantidad_lote">
    <call-query href="extraerCantidadLote">
      <with-param name="cantidad" query-param="cantidad" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="batch_id" query-param="batch_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/lotes/movimiento_stock">
    <call-query href="movimientoStock">
      <with-param name="batch_id" query-param="batch_id" />
      <with-param name="cantidad" query-param="cantidad" />
      <with-param name="old_batch_id" query-param="old_batch_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/establecimiento/{esta_id}">
    <call-query href="getEstablecimiento2">
      <with-param name="esta_id" query-param="esta_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/establecimientos">
    <call-query href="setEstablecimiento">
      <with-param name="nombre" query-param="nombre" />
      <with-param name="longitud" query-param="longitud" />
      <with-param name="latitud" query-param="latitud" />
      <with-param name="calles" query-param="calles" />
      <with-param name="altura" query-param="altura" />
      <with-param name="localidad" query-param="localidad" />
      <with-param name="pais" query-param="pais" />
      <with-param name="usuario" query-param="usuario" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="DELETE" path="/establecimientos">
    <call-query href="delEstablecimiento">
      <with-param name="esta_id" query-param="esta_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/recipientes/contenido/{reci_id}">
    <call-query href="getContenidoRecipiente">
      <with-param name="reci_id" query-param="reci_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/depositos_establecimiento/{esta_id}">
    <call-query href="getDepositosEstablecimiento">
      <with-param name="esta_id" query-param="esta_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/recipientes/deposito/{depo_id}/establecimiento/{esta_id}">
    <call-query href="getRecipientesDepositoEstablecimiento">
      <with-param name="depo_id" query-param="depo_id" />
      <with-param name="esta_id" query-param="esta_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/recipientes">
    <call-query href="setRecipiente">
      <with-param name="tipo" query-param="tipo" />
      <with-param name="patente" query-param="patente" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="depo_id" query-param="depo_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/recipientes/movimientoTransporte">
    <call-query href="setRecipienteConMotrId">
      <with-param name="tipo" query-param="tipo" />
      <with-param name="patente" query-param="patente" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="depo_id" query-param="depo_id" />
      <with-param name="motr_id" query-param="motr_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/getAllRecipientes">
    <call-query href="getAllRecipientes" />
  </resource>
  <resource method="PUT" path="/deleteRecipiente">
    <call-query href="deleteRecipiente">
      <with-param name="reci_id" query-param="reci_id" />
    </call-query>
  </resource>
  <resource method="PUT" path="/updateRecipiente">
    <call-query href="updateRecipiente">
      <with-param name="reci_tipo" query-param="reci_tipo" />
      <with-param name="reci_nombre" query-param="reci_nombre" />
      <with-param name="reci_id" query-param="reci_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/recipientes/establecimiento/{esta_id}/deposito/{depo_id}/estado/{estado}/tipo/{tipo}/categoria/{care_id}">
    <call-query href="getRecipientesFull">
      <with-param name="tipo" query-param="tipo" />
      <with-param name="estado" query-param="estado" />
      <with-param name="esta_id" query-param="esta_id" />
      <with-param name="depo_id" query-param="depo_id" />
      <with-param name="care_id" query-param="care_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/tabla">
    <call-query href="setTabla">
      <with-param name="tabla" query-param="tabla" />
      <with-param name="valor" query-param="valor" />
      <with-param name="descripcion" query-param="descripcion" />
    </call-query>
  </resource>
  <resource method="GET" path="/articulo/nombre/{batch_id}">
    <call-query href="getArticuloPorId">
      <with-param name="arti_id" query-param="arti_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/pedidos/tareas/{tapl_id}">
    <call-query href="getPedidosTareas">
      <with-param name="tapl_id" query-param="tapl_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/pedidos/detalle/{pema_id}">
    <call-query href="getDetallePedido">
      <with-param name="pema_id" query-param="pema_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/pedidos/tareas">
    <call-query href="setPedidoTarea">
      <with-param name="pema_id" query-param="pema_id" />
      <with-param name="tapl_id" query-param="tapl_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/establecimientos/empresa/{empr_id}">
    <call-query href="getEstablecimeintosXEmpresa">
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/notapedido/origen">
    <call-query href="setOrigenPedido">
      <with-param name="tipo" query-param="tipo" />
      <with-param name="orig_id" query-param="orig_id" />
      <with-param name="pema_id" query-param="pema_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/notapedido/nuevo">
    <call-query href="setNuevoPedido">
      <with-param name="fecha" query-param="fecha" />
      <with-param name="estado" query-param="estado" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/lote/extraer">
    <call-query href="extraerCantidadLote">
      <with-param name="cantidad" query-param="cantidad" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="batch_id" query-param="batch_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/lote/crear">
    <call-query href="crearLote">
      <with-param name="prov_id" query-param="prov_id" />
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="depo_id" query-param="depo_id" />
      <with-param name="codigo" query-param="codigo" />
      <with-param name="fec_ven" query-param="fec_ven" />
    </call-query>
  </resource>
  <resource method="GET" path="/stock/ajuste/tipo/list">
    <call-query href="getTiposAjustes" />
  </resource>
  <resource method="GET" path="/establecimiento/{esta_id}/deposito/list">
    <call-query href="getDepositosPorEstablecimiento">
      <with-param name="esta_id" query-param="esta_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/stock/ajuste">
    <call-query href="crearAjuste">
      <with-param name="tipo_ajuste" query-param="tipo_ajuste" />
      <with-param name="justificacion" query-param="justificacion" />
      <with-param name="usuario_app" query-param="usuario_app" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/stock/ajuste/detalle">
    <call-query href="crearDetalleAjuste">
      <with-param name="ajus_id" query-param="ajus_id" />
      <with-param name="lote_id" query-param="lote_id" />
      <with-param name="cantidad" query-param="cantidad" />
    </call-query>
  </resource>
    <resource method="POST" path="/stock/ajuste/int/detalle">
    <call-query href="crearDetalleAjusteInt">
      <with-param name="tipo_ajuste" query-param="tipo_ajuste" />
      <with-param name="justificacion" query-param="justificacion" />      
      <with-param name="arti_inte_id" query-param="arti_inte_id" />
      <with-param name="depo_inte_id" query-param="depo_inte_id" />
      <with-param name="prov_id" query-param="prov_id" />      
      <with-param name="empr_id" query-param="empr_id" />     
      <with-param name="cantidad" query-param="cantidad" />
    </call-query>
  </resource>
  <resource method="GET" path="deposito/{depo_id}/articulo/{arti_id}/lote/list">
    <call-query href="getLotePorArticuloYDeposito">
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="depo_id" query-param="depo_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/establecimientos/empresa/{empr_id}">
    <call-query href="getEstablecimientosXEmpresa">
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/articulos/empresa/{empr_id}">
    <call-query href="getArticulos">
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/movimientoInterno">
    <call-query href="setMovimientoInterno">
      <with-param name="num_comprobante" query-param="num_comprobante" />
      <with-param name="fec_envio" query-param="fec_envio" />
      <with-param name="patente" query-param="patente" />
      <with-param name="acoplado" query-param="acoplado" />
      <with-param name="conductor" query-param="conductor" />
      <with-param name="usuario_app" query-param="usuario_app" />
      <with-param name="depo_id_origen" query-param="depo_id_origen" />
      <with-param name="depo_id_destino" query-param="depo_id_destino" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/movimientoInterno/detalle">
    <call-query href="setDetaMovimientoInterno">
      <with-param name="codigo" query-param="codigo" />
      <with-param name="cantidad" query-param="cantidad" />
      <with-param name="usuario_app" query-param="usuario_app" />
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="lote_id_origen" query-param="lote_id_origen" />
      <with-param name="moin_id" query-param="moin_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/movimientosInternos/estado/{estado}/origen/{depo_id_origen}/destino/{depo_id_destino}/moin_id/{moin_id}/empresa/{empr_id}">
    <call-query href="getMovimientosInternos">
      <with-param name="depo_id_destino" query-param="depo_id_destino" />
      <with-param name="depo_id_origen" query-param="depo_id_origen" />
      <with-param name="moin_id" query-param="moin_id" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="estado" query-param="estado" />
    </call-query>
  </resource>
  <resource method="GET" path="/movimientoInterno/detalle/{moin_id}">
    <call-query href="getDetalleMovimientoInterno">
      <with-param name="moin_id" query-param="moin_id" />
    </call-query>
  </resource>
  <resource method="PUT" path="/movimientoInterno">
    <call-query href="updateMovimientoInterno">
      <with-param name="estado" query-param="estado" />
      <with-param name="fec_recepcion" query-param="fec_recepcion" />
      <with-param name="observaciones_recepcion" query-param="observaciones_recepcion" />
      <with-param name="moin_id" query-param="moin_id" />
    </call-query>
  </resource>
  <resource method="PUT" path="/movimientoInterno/detalle">
    <call-query href="updateDetaMovimientoInterno">
      <with-param name="cantidad_recibida" query-param="cantidad_recibida" />
      <with-param name="demi_id" query-param="demi_id" />
      <with-param name="lote_id_destino" query-param="lote_id_destino" />
    </call-query>
  </resource>
  <resource method="DELETE" path="/movimientoInterno">
    <call-query href="deleteMovimientoInterno">
      <with-param name="moin_id" query-param="moin_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/lote/agregarActualizar">
    <call-query href="setUpdateLote">
      <with-param name="prov_id" query-param="prov_id" />
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="depo_id" query-param="depo_id" />
      <with-param name="cod_lote" query-param="cod_lote" />
      <with-param name="fec_vencimiento" query-param="fec_vencimiento" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="cantidad" query-param="cantidad" />
    </call-query>
  </resource>
  <resource method="POST" path="/lote/descontar">
    <call-query href="updateLoteDescontar">
      <with-param name="cantidad" query-param="cantidad" />
      <with-param name="lote_id" query-param="lote_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/notapedidos/origen/{tipo}/{orig_id}">
    <call-query href="getPedidosXOrigen">
      <with-param name="tipo" query-param="tipo" />
      <with-param name="orig_id" query-param="orig_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/articulos/tipo/{tipo}/{empr_id}">
    <call-query href="getArticulosXTipo">
      <with-param name="tipo" query-param="tipo" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/empresa/{empr_id}/encargado/{user_id}/depositos/list">
    <call-query href="getDepositosPorEmpresa">
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="user_id" query-param="user_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/lote/id/prov_id/{prov_id}/arti_id/{arti_id}/depo_id/{depo_id}/empr_id/{empr_id}/cod_lote/{cod_lote}">
    <call-query href="getLoteId">
      <with-param name="prov_id" query-param="prov_id" />
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="depo_id" query-param="depo_id" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="cod_lote" query-param="cod_lote" />
    </call-query>
  </resource>
  <resource method="GET" path="/movimientos/tipo/{tipo}/desde/{fec1}/hasta/{fec2}/deposito/{depo_id}/articulo/{arti_id}/lote/{lote_id}">
    <call-query href="getHistoricoMovimientos">
      <with-param name="depo_id" query-param="depo_id" />
      <with-param name="tipo" query-param="tipo" />
      <with-param name="fec1" query-param="fec1" />
      <with-param name="fec2" query-param="fec2" />
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="lote_id" query-param="lote_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/stock/articulo/{arti_id}/deposito/{depo_id}/tipo/{tipo}">
    <call-query href="getStockXArticuloYDeposito">
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="depo_id" query-param="depo_id" />
      <with-param name="tipo" query-param="tipo" />
    </call-query>
  </resource>
  <resource method="GET" path="/articulos/etapa/{etap_id}/empresa/{empr_id}">
    <call-query href="getArticulosYTiposXEtapa">
      <with-param name="etap_id" query-param="etap_id" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/establecimientos/{empr_id}">
    <call-query href="getEstablecimientos">
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/proveedores/{empr_id}">
    <call-query href="getProveedores">
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="DELETE" path="/proveedor">
    <call-query href="deleteProveedor">
      <with-param name="prov_id" query-param="prov_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/recipientes/empresa/{empr_id}">
    <call-query href="getRecipientesXEmpresa">
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/proveedores">
    <call-query href="setProveedor">
      <with-param name="nombre" query-param="nombre" />
      <with-param name="cuit" query-param="cuit" />
      <with-param name="domicilio" query-param="domicilio" />
      <with-param name="telefono" query-param="telefono" />
      <with-param name="email" query-param="email" />
      <with-param name="pais" query-param="pais" />
      <with-param name="estado" query-param="estado" />
      <with-param name="localidad" query-param="localidad" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="PUT" path="/proveedor">
    <call-query href="updateProveedor">
      <with-param name="nombre" query-param="nombre" />
      <with-param name="cuit" query-param="cuit" />
      <with-param name="domicilio" query-param="domicilio" />
      <with-param name="telefono" query-param="telefono" />
      <with-param name="email" query-param="email" />
      <with-param name="localidad" query-param="localidad" />
      <with-param name="estado" query-param="estado" />
      <with-param name="pais" query-param="pais" />
      <with-param name="prov_id" query-param="prov_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/articulo/validar/{barcode}/empresa/{empr_id}">
    <call-query href="validaArticulo">
      <with-param name="barcode" query-param="barcode" />
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/lotes/stock/empresa/{empr_id}">
    <call-query href="getStock">
      <with-param name="empr_id" query-param="empr_id" />
    </call-query>
  </resource>
  <resource method="GET" path="/depositos/empresa/{empr_id}/encargado/{user_id}/establecimiento/{esta_id}">
    <call-query href="getDepositosPorEstablecimiento">
      <with-param name="esta_id" query-param="esta_id" />
      <with-param name="empr_id" query-param="empr_id" />
      <with-param name="user_id" query-param="user_id" />
    </call-query>
  </resource>
  <resource method="POST" path="/notapedido/detalle">
    <call-query href="setDetaNotaPedido">
      <with-param name="pema_id" query-param="pema_id" />
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="cantidad" query-param="cantidad" />
    </call-query>
  </resource>
  <resource method="POST" path="/pedidos/detalle/conreceta">
    <call-query href="setDetallePedidoConReceta">
      <with-param name="cantidad" query-param="cantidad" />
      <with-param name="pema_id" query-param="pema_id" />
      <with-param name="arti_id" query-param="arti_id" />
      <with-param name="receta" query-param="receta" />
      <with-param name="cantidad_receta" query-param="cantidad_receta" />
      <with-param name="empaque" query-param="empaque" />
    </call-query>
  </resource>
  <resource method="PUT" path="/pedidos/eliminadetallepedidoanterior">
    <call-query href="eliminaDetallesPedidoAnterior">
      <with-param name="pema_id" query-param="pema_id" />
    </call-query>
  </resource>
  <resource method="PUT" path="pedidos/updatejustificacion">
    <call-query href="updateJustificacion">
      <with-param name="justificacion" query-param="justificacion" />
      <with-param name="pema_id" query-param="pema_id" />
    </call-query>
  </resource>
  <query id="getArticulos" useConfig="ToolsDataSource">
    <sql>SELECT A.*, coalesce(sum(cantidad), 0) as stock, unidad_medida as um, (array_agg(C.batch_id order by batch_id))[1] as batch_id
FROM alm.alm_articulos A
LEFT JOIN alm.alm_lotes C ON C.arti_id = A.arti_id
WHERE A.empr_id = cast(:empr_id as integer)
AND A.eliminado = false
GROUP BY A.arti_id</sql>
    <result outputType="json">{
    "articulos": {
        "articulo": [
            {
                "arti_id": "$arti_id",
                "barcode": "$barcode",
                "titulo": "$descripcion",
                "descripcion": "$descripcion",
                "costo": "$costo",
                "cantidad_caja": "$cantidad_caja",
                "punto_pedido": "$punto_pedido",
                "estado": "$estado",
                "unidad_medida": "$unidad_medida",
                "es_loteado": "$es_loteado",
                "stock": "$stock",
                "batch_id": "$batch_id"
            }
        ]
    }
}</result>
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="setDetallePedido" useConfig="ToolsDataSource">
    <sql>INSERT INTO alm.alm_deta_pedidos_materiales
(cantidad, pema_id, arti_id)
VALUES(cast(:cantidad as float4), cast(:pema_id as integer), cast(:arti_id as integer));</sql>
    <param name="cantidad" sqlType="STRING" />
    <param name="pema_id" sqlType="STRING" />
    <param name="arti_id" sqlType="STRING" />
  </query>
  <query id="setPedido" useConfig="ToolsDataSource">
    <sql>INSERT INTO alm.alm_pedidos_materiales
(fecha, justificacion, case_id, estado, empr_id, batch_id)
VALUES(TO_DATE(:fecha, 'YYYY-MM-DD'), :justificacion, cast(:case_id as integer), :estado, cast(:empr_id as integer), cast(:batch_id as integer)) returning pema_id;</sql>
    <result outputType="json">{
  "respuesta": {
    "pema_id":"$pema_id"
  }
}</result>
    <param name="fecha" sqlType="STRING" />
    <param name="justificacion" sqlType="STRING" />
    <param name="case_id" sqlType="STRING" />
    <param name="estado" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="batch_id" sqlType="STRING" />
  </query>
  <query id="deleteDetalle" useConfig="ToolsDataSource">
    <sql>DELETE FROM alm.alm_deta_pedidos_materiales
WHERE pema_id = cast(:pema_id as integer)</sql>
    <param name="pema_id" sqlType="STRING" />
  </query>
  <query id="getPedido" useConfig="ToolsDataSource">
    <sql>select *
from alm.alm_pedidos_materiales
where pema_id = cast(:pema_id as integer)
and empr_id = cast(:empr_id as integer)
and not eliminado</sql>
    <result outputType="json">{
  "pedidos": {
    "pedido": [
        {
            "pema_id":"$pema_id",
            "case_id":"$case_id",
            "estado":"$estado",
            "batch_id":"$batch_id",
            "fecha":"$fecha",
            "justificacion":"$justificacion",
            "motivo_rechazo":"$motivo_rechazo",
            "@getDetallePedido":"$pema_id->pema_id"
        }
    ]
  }
}</result>
    <param name="pema_id" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="getDetallePedido" useConfig="ToolsDataSource">
    <sql>select pm.*,coalesce(pm.resto,0) as xresto, a.barcode, a.descripcion
from alm.alm_deta_pedidos_materiales pm
join alm.alm_articulos a
on a.arti_id = pm.arti_id
where pema_id = cast(:pema_id as integer)
and not pm.eliminado</sql>
    <result outputType="json">{
  "detalles": {
    "detalle": [
        {
            "depe_id":"$depe_id",
            "cantidad":"$cantidad",
            "resto":"$xresto",
            "arti_id":"$arti_id",
            "barcode":"$barcode",
            "descripcion":"$descripcion",
            "pema_id":"$pema_id"
        }
    ]
  }
}</result>
    <param name="pema_id" sqlType="STRING" />
  </query>
  <query id="getPedidoXBatch" useConfig="ToolsDataSource">
    <sql>SELECT *
FROM alm.alm_pedidos_materiales
WHERE batch_id = cast(:batch_id as integer)
and not eliminado</sql>
    <result outputType="json">{
  "pedidos": {
    "pedido": [
        {
            "pema_id":"$pema_id",
            "case_id":"$case_id",
            "estado":"$estado",
            "batch_id":"$batch_id",
            "fecha":"$fecha",
            "justificacion":"$justificacion",
            "motivo_rechazo":"$motivo_rechazo",
         }
    ]
  }
}</result>
    <param name="batch_id" sqlType="STRING" />
  </query>
  <query id="getEstablecimiento" useConfig="ToolsDataSource">
    <sql>SELECT *
 FROM
prd.establecimientos
where eliminado = false</sql>
    <result outputType="json">{
 "establecimientos": {
      "establecimiento": [
        {
          "esta_id": "$esta_id",
          "nombre": "$nombre",
          "lng": "$lng",
          "lat": "$lat",
          "calle": "$calle",
          "altura": "$altura",
          "localidad": "$localidad",
          "estado": "$estado",
          "pais": "$pais",
          "fec_alta": "$fec_alta",
          "usuario": "$usuario"
        }
      ]
 }
}</result>
  </query>
  <query id="getLote" useConfig="ToolsDataSource">
    <sql>select RECI.reci_id, reci.nombre, reci.estado from prd.recipientes Reci, alm.alm_depositos Depo
where reci.depo_id = depo.depo_id AND
depo.esta_id = CAST(:esta_id as INTEGER)</sql>
    <result outputType="json">{
"recipientes":
      {"recipiente":
        [
          {
          "id": "$reci_id",
          "titulo":"$nombre",
          "estado":"$estado"
          }          
        ]
      }
 }</result>
    <param name="esta_id" sqlType="STRING" />
  </query>
  <query id="getArticulos2" useConfig="ToolsDataSource">
    <sql>SELECT A.*, coalesce(sum(cantidad), 0) as stock
FROM alm.alm_articulos A
LEFT JOIN alm.alm_lotes C ON C.arti_id = A.arti_id
WHERE A.empr_id = 1
AND A.eliminado = FALSE
GROUP BY A.arti_id</sql>
    <result outputType="json">{
    "materias": {
        "materia": [
            {
                "id": "$arti_id",
                "barcode": "$barcode",
                "titulo": "$descripcion",
                "descripcion": "$descripcion",
                "costo": "$costo",
                "cantidad_caja": "$cantidad_caja",
                "punto_pedido": "$punto_pedido",
                "estado": "$estado",
                "unidad_medida": "$unidad_medida",
                "es_loteado": "$es_loteado",
                "stock": "$stock"
            }
        ]
    }
}</result>
  </query>
  <query id="getArticulo" useConfig="ToolsDataSource">
    <sql>SELECT A.*, coalesce(sum(cantidad), 0) as stock
FROM alm.alm_articulos A
LEFT JOIN alm.alm_lotes C ON C.arti_id = A.arti_id
WHERE A.empr_id = 1
AND A.eliminado = FALSE
AND A.arti_id = CAST(:arti_id as INTEGER)
GROUP BY A.arti_id</sql>
    <result outputType="json">{
    "articulos": {
        "articulo": [
            {
                "arti_id": "$arti_id",
                "barcode": "$barcode",
                "descripcion": "$descripcion",
                "costo": "$costo",
                "cantidad_caja": "$cantidad_caja",
                "punto_pedido": "$punto_pedido",
                "estado": "$estado",
                "unidad_medida": "$unidad_medida",
                "es_loteado": "$es_loteado",
                "stock": "$stock"
            }
        ]
    }
}</result>
    <param name="arti_id" sqlType="STRING" />
  </query>
  <query id="setArticulo" useConfig="ToolsDataSource" returnGeneratedKeys="true" keyColumns="">
    <sql>
    insert
	into
	alm.alm_articulos
(barcode,
	descripcion,
	es_caja,
	cantidad_caja,
	punto_pedido,
	estado,
	empr_id,
	es_loteado,
	tiar_id,
	unme_id,
	inte_id)
select param.barcode,
	param.descripcion,
	param.es_caja,
	param.cantidad_caja,
	param.punto_pedido,
	param.estado,
	param.empr_id,
	param.es_loteado,
	int.traducir_valor_tabla_in(param.empr_id,'tipo_articulo',param.tiar_id),
	int.traducir_valor_tabla_in(param.empr_id,'unidades_medida',param.unme_id),
	param.inte_id
from( select :barcode barcode,
	:descripcion descripcion,
	cast(:es_caja as boolean) es_caja ,
	cast(:cantidad_caja as float) cantidad_caja,
	cast(:punto_pedido as float) punto_pedido,
	:estado estado,
	cast(:empr_id as integer) empr_id,
	cast(:es_loteado as boolean)es_loteado,
	:tiar_id tiar_id,
	:unme_id unme_id,
	:inte_id inte_id) param
	
</sql>
    <param name="barcode" paramType="SCALAR" sqlType="STRING" />
    <param name="descripcion" paramType="SCALAR" sqlType="STRING" />
    <param name="es_caja" paramType="SCALAR" sqlType="STRING" />
    <param name="cantidad_caja" paramType="SCALAR" sqlType="STRING" />
    <param name="punto_pedido" paramType="SCALAR" sqlType="STRING" />
    <param name="estado" paramType="SCALAR" sqlType="STRING" />
    <param name="empr_id" paramType="SCALAR" sqlType="STRING" />
    <param name="es_loteado" paramType="SCALAR" sqlType="STRING" />
    <param name="tiar_id" paramType="SCALAR" sqlType="STRING" />
    <param name="unme_id" paramType="SCALAR" sqlType="STRING" />
    <param name="inte_id" paramType="SCALAR" sqlType="STRING" />
  </query>
  <query id="setNotaPedido" keyColumns="pema_id" returnGeneratedKeys="true" useConfig="ToolsDataSource">
    <sql>insert into alm.alm_pedidos_materiales(fecha, empr_id, batch_id) 
values(TO_DATE(:fecha, 'YYYY-MM-DD'), CAST(:empr_id AS INTEGER), CAST(:batch_id AS INTEGER))</sql>
    <result outputType="json">{
 "nota_id": { 
   "pedido_id": "$pema_id" 
 }
}

</result>
    <param name="fecha" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="batch_id" sqlType="STRING" />
  </query>
  <query id="getArticuloPorId" useConfig="ToolsDataSource">
    <sql>select 
   arti_id, barcode, descripcion 
from 
   alm.alm_articulos 
where 
   arti_id = CAST(:arti_id AS INTEGER)</sql>
    <result outputType="json">{
 "articulo":{
     "arti_id": "$arti_id",
     "barcode": "$barcode",
     "descripcion": "$descripcion"
  }
} </result>
    <param name="arti_id" sqlType="STRING" />
  </query>
  <query id="getinfoPedMatPorCaseId" useConfig="ToolsDataSource">
    <sql>select 
 PM.pema_id, PM.fecha, PM.justificacion, PM.estado, LO.lote_id 
from 
 alm.alm_pedidos_materiales PM
join prd.lotes LO on LO.batch_id = PM.batch_id 
where 
 case_id = CAST(:case_id as INTEGER)</sql>
    <result outputType="json">{
    "info":{
      "pema_id": "$pema_id",
      "lote_id": "$lote_id",
      "fecha": "$fecha",
      "justificacion": "$justificacion",
      "estado": "$estado"
    }
}</result>
    <param name="case_id" sqlType="STRING" />
  </query>
  <query id="getArticulosXTipo" useConfig="ToolsDataSource">
    <sql>select 
  ar.arti_id
  , AR.descripcion
  , AR.barcode
  , ar.unidad_medida um
  , COALESCE(sum(lo.cantidad),0) stock
from 
  core.tablas t
,alm.alm_articulos AR
left join alm.alm_lotes lo on lo.arti_id  = ar.arti_id 
  and lo.eliminado = false 
  and lo.estado = 'AC'
  and lo.fec_vencimiento >=  date_trunc('day',now())
,(select :tipo tipo) param
where t.tabla = 'tipo_articulo'
and AR.tiar_id like case when param.tipo = 'TODOS' then AR.tiar_id else '%'|| param.tipo || '%' end
and AR.empr_id = cast(:empr_id as integer)  
group by ar.arti_id</sql>
    <result outputType="json">{
  "articulos":{
     "articulo":[
        {
          "arti_id": "$arti_id",
          "descripcion": "$descripcion",
          "barcode":"$barcode",
          "um":"$um",
          "stock":"$stock"
                }
      ]
    }
}</result>
    <param name="tipo" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="extraerCantidadLote" useConfig="ToolsDataSource">
    <sql>update alm.alm_lotes
set cantidad = cantidad - CAST(:cantidad as FLOAT8)
where batch_id = CAST(:batch_id as VARCHAR)
and empr_id = CAST(:empr_id as INTEGER)</sql>
    <param name="cantidad" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="batch_id" sqlType="STRING" />
  </query>
  <query id="movimientoStock" useConfig="ToolsDataSource">
    <sql>insert
	into
	alm.alm_lotes (prov_id,
	arti_id,
	depo_id,
	codigo,
	fec_vencimiento,
	cantidad,
	empr_id,
	user_id,
	estado,batch_id)
select prov_id,
	arti_id,
	depo_id,
	codigo,
	fec_vencimiento,
	cast(:cantidad as float8),
	empr_id,
	user_id,
	estado
 ,cast(:batch_id as VARCHAR) from alm.alm_lotes
where batch_id = CAST(:old_batch_id as VARCHAR)</sql>
    <param name="batch_id" sqlType="STRING" />
    <param name="cantidad" sqlType="STRING" />
    <param name="old_batch_id" sqlType="STRING" />
  </query>
  <query id="setTabla" useConfig="ToolsDataSource">
    <sql>INSERT INTO alm.utl_tablas
(tabla, valor, descripcion)
VALUES(:tabla, :valor, :descripcion);</sql>
    <param name="tabla" sqlType="STRING" />
    <param name="valor" sqlType="STRING" />
    <param name="descripcion" sqlType="STRING" />
  </query>
  <query id="getEstablecimiento2" useConfig="ToolsDataSource">
    <sql>SELECT * FROM prd.establecimientos
WHERE esta_id = CAST(:esta_id as INTEGER)</sql>
    <result outputType="json">{
    "establecimientos":{
        "establecimiento":[
            {
                "esta_id":"$esta_id",
                "nombre":"$nombre"
            }
        ]
    }
}</result>
    <param name="esta_id" sqlType="STRING" />
  </query>
  <query id="setEstablecimiento" useConfig="ToolsDataSource">
    <sql>INSERT INTO prd.establecimientos (nombre, lng, lat, calle, altura, localidad, pais, fec_alta, usuario, empr_id) 
VALUES(:nombre, :longitud, :latitud, :calles, :altura, :localidad, :pais, now(), :usuario, CAST(:empr_id as integer));</sql>
    <param name="nombre" sqlType="STRING" />
    <param name="longitud" sqlType="STRING" />
    <param name="latitud" sqlType="STRING" />
    <param name="calles" sqlType="STRING" />
    <param name="altura" sqlType="STRING" />
    <param name="localidad" sqlType="STRING" />
    <param name="pais" sqlType="STRING" />
    <param name="usuario" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="delEstablecimiento" useConfig="ToolsDataSource">
    <sql>UPDATE
prd.establecimientos 
set eliminado = true
where esta_id = CAST(:esta_id as integer)</sql>
    <param name="esta_id" sqlType="STRING" />
  </query>
  <query id="getContenidoRecipiente" useConfig="ToolsDataSource">
    <sql>select al.arti_id, arti.barcode, al.codigo as lote_id, al.cantidad 
from prd.lotes  pl
join alm.alm_lotes al on pl.batch_id = al.batch_id 
join alm.alm_articulos arti on arti.arti_id = al.arti_id
where reci_id = CAST(:reci_id as integer)</sql>
    <result outputType="json">{
    "batches":{
       "batch":[
           {
               "arti_id":"$arti_id",
               "barcode":"$barcode",
               "cantidad":"$cantidad",
               "lote_id":"$lote_id"
           }
       ] 
    }
}</result>
    <param name="reci_id" sqlType="STRING" />
  </query>
  <query id="getDepositosEstablecimiento" useConfig="ToolsDataSource">
    <sql>SELECT a.depo_id, a.descripcion, e.esta_id, e.nombre
FROM alm.alm_depositos a 
join prd.establecimientos e on e.esta_id = a.esta_id
WHERE e.esta_id = CAST(:esta_id as integer)
AND a.eliminado = false</sql>
    <result outputType="json">{
   "depositos":{
      "deposito":[
         {
            "depo_id":"$depo_id",
            "descripcion":"$descripcion",
            "esta_id":"$esta_id",
            "esta_nombre":"$nombre"
         }
      ]
   }
}</result>
    <param name="esta_id" sqlType="STRING" />
  </query>
  <query id="getRecipientesDepositoEstablecimiento" useConfig="ToolsDataSource">
    <sql>SELECT r.reci_id, r.nombre as reci_nombre, a.depo_id, a.descripcion as depo_descripcion, e.esta_id, e.nombre as esta_nombre
FROM prd.recipientes r
JOIN alm.alm_depositos a ON a.depo_id = r.depo_id
JOIN prd.establecimientos e ON e.esta_id = a.esta_id
WHERE r.eliminado = 0
AND a.depo_id = CAST(:depo_id as integer) AND a.eliminado = false
AND e.esta_id = CAST(:esta_id as integer)</sql>
    <result outputType="json">{
   "recipientes":{
      "recipiente":[
         {
            "reci_id":"$reci_id",
            "reci_nombre":"$reci_nombre",
            "depo_id":"$depo_id",
            "depo_descripcion":"$depo_descripcion",
            "esta_id":"$esta_id",
            "esta_nombre":"$esta_nombre"
         }
      ]
   }
}</result>
    <param name="depo_id" sqlType="STRING" />
    <param name="esta_id" sqlType="STRING" />
  </query>
  <query id="setRecipiente" useConfig="ToolsDataSource">
    <sql>INSERT INTO prd.recipientes (tipo,nombre,empr_id,depo_id) 
VALUES 
(:tipo,:patente, CAST(:empr_id as INTEGER), CAST(:depo_id as INTEGER))</sql>
    <param name="tipo" sqlType="STRING" />
    <param name="patente" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="depo_id" sqlType="STRING" />
  </query>
  <query id="setRecipienteConMotrId" keyColumns="reci_id" returnGeneratedKeys="true" useConfig="ToolsDataSource">
    <sql>INSERT INTO prd.recipientes (tipo,nombre,empr_id,depo_id, motr_id) 
VALUES 
(:tipo,:patente, CAST(:empr_id as INTEGER), CAST(:depo_id as INTEGER), CAST(:motr_id as INTEGER))</sql>
    <result outputType="json">{
 "resultado":{"reci_id":"$reci_id"}
}</result>
    <param name="tipo" sqlType="STRING" />
    <param name="patente" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="depo_id" sqlType="STRING" />
    <param name="motr_id" sqlType="STRING" />
  </query>
  <query id="getAllRecipientes" useConfig="ToolsDataSource">
    <sql>SELECT r.reci_id, r.tipo as reci_tipo, r.nombre as reci_nombre, cast(r.fec_alta as date) as reci_fec_alta, 
d.depo_id, d.descripcion as depo_descripcion, e.esta_id, e.nombre as esta_nombre
FROM prd.recipientes r 
join alm.alm_depositos d on d.depo_id = r.depo_id
join prd.establecimientos e on e.esta_id = d.esta_id
where r.eliminado = 0
order by r.fec_alta desc, d.esta_id asc, r.tipo asc, d.descripcion asc, r.nombre asc</sql>
    <result outputType="json">{
   "recipientes":{
      "recipiente":[
         {
            "reci_id":"$reci_id", 
            "reci_tipo":"$reci_tipo", 
            "reci_nombre":"$reci_nombre", 
            "reci_fec_alta":"$reci_fec_alta ", 
            "depo_id":"$depo_id", 
            "depo_descripcion":"$depo_descripcion", 
            "esta_id":"$esta_id", 
            "esta_nombre":"$esta_nombre"
         }
      ]
   }
}</result>
  </query>
  <query id="deleteRecipiente" useConfig="ToolsDataSource">
    <sql>UPDATE prd.recipientes
SET eliminado = 1 
WHERE reci_id = cast(:reci_id as int8)</sql>
    <param name="reci_id" sqlType="STRING" />
  </query>
  <query id="updateRecipiente" useConfig="ToolsDataSource">
    <sql>UPDATE prd.recipientes
SET tipo = :reci_tipo, nombre = :reci_nombre
WHERE reci_id = cast(:reci_id as int8)</sql>
    <param name="reci_tipo" sqlType="STRING" />
    <param name="reci_nombre" sqlType="STRING" />
    <param name="reci_id" sqlType="STRING" />
  </query>
  <query id="getRecipientesFull" useConfig="ToolsDataSource">
    <sql>select re.reci_id
      ,re.nombre
      ,re.tipo
      ,ta.valor care_id
      ,ta.descripcion categoria_recipiente
      ,re.estado
      ,re.depo_id
      ,es.esta_id
       ,re.row
        ,re.col
from prd.recipientes as re
     ,alm.alm_depositos as de  
	 ,prd.establecimientos as es 
	 ,core.tablas ta
     ,(select :tipo as tipo) as tipo
     ,(SELECT :care_id AS care_id) AS care
     ,(select :estado as estado) as estado
     ,(select :esta_id  as esta_id) as esta
     ,(SELECT :depo_id AS depo_id) AS depo
where de.depo_id = re.depo_id
AND es.esta_id =  de.esta_id
AND re.care_id = ta.tabl_id 
AND re.tipo = case when tipo.tipo = 'TODOS' then re.tipo else tipo.tipo end
and re.estado = case when estado.estado = 'TODOS' then re.estado else estado.estado end 
and re.care_id = case when care.care_id = 'TODOS' then re.care_id else care.care_id end 
and re.depo_id = case when depo.depo_id = 'TODOS' then re.depo_id else CAST(depo.depo_id AS integer) end 
and es.esta_id = case when esta.esta_id = 'TODOS' then es.esta_id else CAST(esta.esta_id AS integer) END</sql>
    <result outputType="json">{
    "recipientes": {
        "recipiente": [
            {
                "reci_id": "$reci_id",
                "nombre": "$nombre",
                "tipo": "$tipo",
                "care_id":"$care_id",
                "categoria_recipiente":"$categoria_recipiente",
                "estado": "$estado",
                "depo_id": "$depo_id",
                "esta_id":"$esta_id",
                "row":"$row",
                "col":"$col"
            }
        ]
    }
}</result>
    <param name="tipo" sqlType="STRING" />
    <param name="estado" sqlType="STRING" />
    <param name="esta_id" sqlType="STRING" />
    <param name="depo_id" sqlType="STRING" />
    <param name="care_id" sqlType="STRING" />
  </query>
  <query id="getEstablecimeintosXEmpresa" useConfig="ToolsDataSource">
    <sql>select *
from prd.establecimientos e 
where e.empr_id =  cast(:empr_id as integer)
and e.eliminado = false</sql>
    <result outputType="json">{
 "establecimientos": {
      "establecimiento": [
        {
          "esta_id": "$esta_id",
          "nombre": "$nombre",
          "lng": "$lng",
          "lat": "$lat",
          "calle": "$calle",
          "altura": "$altura",
          "localidad": "$localidad",
          "estado": "$estado",
          "pais": "$pais",
          "fec_alta": "$fec_alta",
          "usuario": "$usuario"
        }
      ]
 }
}</result>
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="getPedidosTareas" useConfig="ToolsDataSource">
    <sql>select apm.*
from tst.rel_tareas_pedidos rtp , alm.alm_pedidos_materiales apm 
where rtp.pema_id = apm.pema_id 
and rtp.tapl_id = cast(:tapl_id as integer)
and not eliminado</sql>
    <result outputType="json">{
  "pedidos": {
    "pedido": [
        {
            "estado":"$estado",
            "fecha":"$fecha",
            "pema_id":"$pema_id",
            "case_id":"$case_id",
            "empr_id":"$empr_id",
            "@getDetallePedido":"$pema_id->pema_id"
        }
    ]
  }
}</result>
    <param name="tapl_id" sqlType="STRING" />
  </query>
  <query id="setPedidoTarea" useConfig="ToolsDataSource">
    <sql>INSERT INTO tst.rel_tareas_pedidos
(tapl_id, pema_id)
VALUES(cast(:tapl_id as integer) ,cast(:pema_id as integer));</sql>
    <param name="pema_id" sqlType="STRING" />
    <param name="tapl_id" sqlType="STRING" />
  </query>
  <query id="setOrigenPedido" useConfig="ToolsDataSource">
    <sql>INSERT INTO alm.origen_pedido_materiales
(tipo, orig_id, pema_id)
VALUES(:tipo, cast(:orig_id as integer), cast(:pema_id as integer));</sql>
    <param name="tipo" sqlType="STRING" />
    <param name="orig_id" sqlType="STRING" />
    <param name="pema_id" sqlType="STRING" />
  </query>
  <query id="setNuevoPedido" useConfig="ToolsDataSource">
    <sql>INSERT INTO alm.alm_pedidos_materiales
(fecha, estado, empr_id)
VALUES(TO_DATE(:fecha, 'YYYY-MM-DD'), :estado, cast(:empr_id as integer)) returning pema_id;</sql>
    <result outputType="json">{
  "respuesta": {
    "pema_id":"$pema_id"
  }
}</result>
    <param name="fecha" sqlType="STRING" />
    <param name="estado" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="extraerCantidadLote" useConfig="ToolsDataSource">
    <sql>update alm_lotes
set cantidad = cantidad - :cantidad 
where codigo = :batch_id 
and empr_id = :empr_id</sql>
    <param name="cantidad" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="batch_id" sqlType="STRING" />
  </query>
  <query id="getDepositosPorEstablecimiento" useConfig="ToolsDataSource">
    <sql>select de.depo_id ,de.descripcion, de.nombre
from alm.alm_depositos de 
left join core.encargados_depositos ed on ed.depo_id  = de.depo_id  
WHERE de.esta_id = cast(:esta_id as integer)
and de.empr_id = cast(:empr_id as integer)
and ed.user_id = cast(:user_id as integer)
and de.eliminado = false</sql>
    <result outputType="json">{"depositos": {
   "deposito":[
       {
        "descripcion":"$descripcion"
        ,"depo_id":"$depo_id"
       }
     ]
}
}</result>
    <param name="esta_id" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="user_id" sqlType="STRING" />
  </query>
  <query id="crearLote" useConfig="ToolsDataSource">
    <sql>insert
	into
	lotes (prov_id,
	arti_id,
	depo_id,
	codigo,
	fec_vencimiento,
	cantidad,
	empr_id,
	user_id,
	estado)
values(:prov_id ,
:arti_id ,
:depo_id ,
:codigo,
to_date(:fec_ven, 'YYYY-MM-DD'),
:cantidad ,
:empr_id ,
:user_id ,
:estado)</sql>
    <param name="prov_id" sqlType="STRING" />
    <param name="arti_id" sqlType="STRING" />
    <param name="depo_id" sqlType="STRING" />
    <param name="codigo" sqlType="STRING" />
    <param name="fec_ven" sqlType="STRING" />
  </query>
  <query id="getTiposAjustes" useConfig="ToolsDataSource">
    <sql>select valor nombre
      ,valor2 tipo
      ,tabl_id id 
      from core.tablas
       where tabla = 'tipos_ajuste_stock'</sql>
    <result outputType="json">{
    "tiposAjuste": {
        "tipoAjuste": [
            {
                "nombre": "$nombre",
                "tipo": "$tipo",
                "id": "$id"
            }
        ]
    }
}</result>
  </query>
  <query id="crearAjuste" returnGeneratedKeys="true" useConfig="ToolsDataSource">
    <sql>INSERT INTO alm.ajustes
( tipo_ajuste
, justificacion
, usuario_app
, empr_id)
VALUES
( :tipo_ajuste
, :justificacion
, :usuario_app
, cast(:empr_id as integer) )</sql>
    <result element="GeneratedKeys" rowName="Entry" useColumnNumbers="true">
      <element column="1" name="ID" xsdType="integer" />
    </result>
    <param name="tipo_ajuste" sqlType="STRING" />
    <param name="justificacion" sqlType="STRING" />
    <param name="usuario_app" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="crearDetalleAjuste" useConfig="ToolsDataSource">
    <sql>call alm.ajuste_detalle_ingresar(
 cast(:ajus_id as integer)
,cast( :lote_id as integer) 
,cast (:cantidad as float) );</sql>
    <param name="ajus_id" sqlType="STRING" />
    <param name="lote_id" sqlType="STRING" />
    <param name="cantidad" sqlType="STRING" />
  </query>
  <query id="crearDetalleAjusteInt" useConfig="ToolsDataSource">
    <sql>call alm.ajuste_detalle_ingresar_int(
 :tipo_ajuste
,:justificacion 
,:arti_inte_id
,:depo_inte_id
,cast( :prov_id as integer)  
,cast (:empr_id as integer) 
,cast (:cantidad as float) );</sql>
    <param name="tipo_ajuste" sqlType="STRING" />
        <param name="justificacion" sqlType="STRING" />
    <param name="arti_inte_id" sqlType="STRING" />
        <param name="depo_inte_id" sqlType="STRING" />
        <param name="prov_id" sqlType="STRING" />
                <param name="empr_id" sqlType="STRING" />
    <param name="cantidad" sqlType="STRING" />
  </query>
  <query id="getLotePorArticuloYDeposito" useConfig="ToolsDataSource">
    <sql>select al.codigo, al.lote_id, al.batch_id 
from alm.alm_lotes al, (select :depo_id depo_id) param 
where al.arti_id = cast(:arti_id as integer) 
and al.depo_id = case when param.depo_id = 'TODOS' then al.depo_id else cast(param.depo_id as integer) end</sql>
    <result outputType="json">{
    "lotes": {
        "lote": [
            {
                "codigo": "$codigo",
                "lote_id": "$lote_id",
                "batch_id": "$batch_id"
            }
        ]
    }
}</result>
    <param name="arti_id" sqlType="STRING" />
    <param name="depo_id" sqlType="STRING" />
  </query>
  <query id="getEstablecimientosXEmpresa" useConfig="ToolsDataSource">
    <sql>SELECT *
 FROM
prd.establecimientos
where empr_id = cast(:empr_id as integer)
and eliminado = false</sql>
    <result outputType="json">{
 "establecimientos": {
 "establecimiento": [
 {
 "esta_id": "$esta_id",
 "nombre": "$nombre",
 "calle": "$calle",
 "altura": "$altura",
 "localidad": "$localidad",
 "estado": "$estado",
 "pais": "$pais"
 }
 ]
 }
}</result>
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="setMovimientoInterno" returnGeneratedKeys="true" useConfig="ToolsDataSource">
    <sql>INSERT
	INTO
	alm.movimientos_internos (num_comprobante,
	fec_envio,
        estado,
	patente,
	acoplado,
	conductor,
	usuario,
	usuario_app,
	depo_id_origen,
	depo_id_destino,
	empr_id)
VALUES(:num_comprobante,
 to_date(:fec_envio, 'YYYY-MM-DD'),
        'EN_CURSO',
	:patente,
	:acoplado,
	:conductor,
	current_user,
	:usuario_app,
	CAST(:depo_id_origen AS INTEGER ),
	cast(:depo_id_destino AS INTEGER),
	cast(:empr_id as integer))</sql>
    <result element="GeneratedKeys" rowName="Entry" useColumnNumbers="true">
      <element column="1" name="ID" xsdType="integer" />
    </result>
    <param name="num_comprobante" sqlType="STRING" />
    <param name="fec_envio" sqlType="STRING" />
    <param name="patente" sqlType="STRING" />
    <param name="acoplado" sqlType="STRING" />
    <param name="conductor" sqlType="STRING" />
    <param name="usuario_app" sqlType="STRING" />
    <param name="depo_id_origen" sqlType="STRING" />
    <param name="depo_id_destino" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="setDetaMovimientoInterno" useConfig="ToolsDataSource">
    <sql>INSERT
	INTO
	alm.deta_movimientos_internos (	
	codigo,
	cantidad_cargada,	
	usuario_app,
	arti_id,
	lote_id_origen,
	moin_id)
VALUES(	:codigo,
	cast(:cantidad as FLOAT4),	
	:usuario_app,
	CAST(:arti_id AS INTEGER),
	CAST(:lote_id_origen AS INTEGER),
	CAST(:moin_id AS INTEGER)
)</sql>
    <param name="codigo" sqlType="STRING" />
    <param name="cantidad" sqlType="STRING" />
    <param name="usuario_app" sqlType="STRING" />
    <param name="arti_id" sqlType="STRING" />
    <param name="lote_id_origen" sqlType="STRING" />
    <param name="moin_id" sqlType="STRING" />
  </query>
  <query id="getMovimientosInternos" useConfig="ToolsDataSource">
    <sql>SELECT  mi.moin_id moin_id_int
	,mi.num_comprobante 
	,mi.depo_id_origen 
	,mi.depo_id_destino 
	,mi.patente 
	,mi.acoplado 
        ,mi.conductor 
        ,mi.estado
    ,to_char(mi.fec_envio,'YYYY-MM-DD') fec_envio 
    ,to_char(mi.fec_recepcion,'YYYY-MM-DD') fec_recepcion
    ,mi.observaciones_recepcion
FROM alm.movimientos_internos mi
,(select :depo_id_destino depo_id_destino,:depo_id_origen depo_id_origen,:moin_id moin_id,:estado estado) dep
where mi.depo_id_destino = case when dep.depo_id_destino ='TODOS' then mi.depo_id_destino else cast(dep.depo_id_destino as integer) end
and mi.depo_id_origen = case when dep.depo_id_origen ='TODOS' then mi.depo_id_origen else cast(dep.depo_id_origen as integer) end
and mi.estado = case when dep.estado ='TODOS' then mi.estado else dep.estado end
and mi.moin_id =  case when dep.moin_id ='TODOS' then mi.moin_id else cast(dep.moin_id as integer) end
and mi.empr_id=cast(:empr_id as integer)
and eliminado=false
;</sql>
    <result outputType="json">{
   "movimientosInternos":{
      "movimientoInterno":[
         {
            "moin_id":"$moin_id_int",
            "num_comprobante":"$num_comprobante",
            "depo_id_origen":"$depo_id_origen",
            "depo_id_destino":"$depo_id_destino",
            "estado":"$estado",
            "patente":"$patente",
            "acoplado":"$acoplado",
            "conductor":"$conductor",
            "@getDetalleMovimientoInterno":"$moin_id->moin_id_int",
            "fec_envio":"$fec_envio",
            "fec_recepcion":"$fec_recepcion",
            "observaciones_recepcion":"$observaciones_recepcion"

         }
      ]
   }
}</result>
    <param name="depo_id_destino" sqlType="STRING" />
    <param name="depo_id_origen" sqlType="STRING" />
    <param name="moin_id" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="estado" sqlType="STRING" />
  </query>
  <query id="getDetalleMovimientoInterno" useConfig="ToolsDataSource">
    <sql>select  dm.codigo "cod_lote" ,
        aa.arti_id ,
		aa.barcode ,
		aa.descripcion ,
		al.prov_id ,
		ap.nombre nom_proveedor,
		dm.cantidad_cargada,
                dm.cantidad_recibida,
		dm.lote_id_origen ,
		dm.lote_id_destino,
                dm.demi_id
from alm.deta_movimientos_internos dm 
,alm.alm_articulos aa 
,alm.alm_lotes al 
,alm.alm_proveedores ap 
where aa.arti_id = dm.arti_id
and al.lote_id = dm.lote_id_origen 
and ap.prov_id = al.prov_id 
and dm.moin_id = cast(:moin_id as integer)</sql>
    <result outputType="json">{
     "detallesMovimientosInternos":{ "detalleMovimientoInterno":[
         {
            "cod_lote":"$cod_lote",
            "arti_id":"$arti_id",
            "barcode":"$barcode",
            "descripcion":"$descripcion",
            "prov_id":"$prov_id",
            "nom_proveedor": "$nom_proveedor",
            "cantidad_cargada":"$cantidad_cargada",
            "cantidad_recibida":"$cantidad_recibida",
            "lote_id_origen":"$lote_id_origen",
            "lote_id_destino":"$lote_id_destino",
            "demi_id":"$demi_id"
         }
      ]
}}</result>
    <param name="moin_id" optional="false" sqlType="INTEGER" />
  </query>
  <query id="updateMovimientoInterno" useConfig="ToolsDataSource">
    <sql>UPDATE alm.movimientos_internos
SET estado = :estado,
fec_recepcion = to_date(:fec_recepcion, 'YYYY-MM-DD'),
observaciones_recepcion = :observaciones_recepcion
WHERE moin_id = cast(:moin_id as integer)</sql>
    <param name="estado" sqlType="STRING" />
    <param name="fec_recepcion" sqlType="STRING" />
    <param name="observaciones_recepcion" sqlType="STRING" />
    <param name="moin_id" sqlType="STRING" />
  </query>
  <query id="updateDetaMovimientoInterno" useConfig="ToolsDataSource">
    <sql>UPDATE
	alm.deta_movimientos_internos
SET
	cantidad_recibida = cast(:cantidad_recibida as float),
        lote_id_destino = cast(:lote_id_destino as integer)
WHERE
	demi_id = cast(:demi_id as integer)</sql>
    <param name="cantidad_recibida" sqlType="STRING" />
    <param name="demi_id" sqlType="STRING" />
    <param name="lote_id_destino" sqlType="STRING" />
  </query>
  <query id="deleteMovimientoInterno" useConfig="ToolsDataSource">
    <sql>UPDATE
	alm.movimientos_internos
SET
	eliminado = true
WHERE
	moin_id = cast( :moin_id as integer)</sql>
    <param name="moin_id" sqlType="STRING" />
  </query>
  <query id="setUpdateLote" useConfig="ToolsDataSource">
    <sql>insert
	into
	alm.alm_lotes (prov_id,
	arti_id,
	depo_id,
	codigo,
	fec_vencimiento,
	cantidad,
	empr_id,
	estado)
select
	cast(:prov_id as integer),
	cast(:arti_id as integer),
	cast( :depo_id as integer),
	:cod_lote,
	to_date(:fec_vencimiento, 'YYYY-MM-DD'),
	can.cant ,
	cast(:empr_id as integer) ,
	'AC'
from (select cast( :cantidad as float) cant) can 
on conflict on constraint alm_lotes_un 
do update set cantidad = alm_lotes.cantidad + excluded.cantidad
returning lote_id</sql>
    <result outputType="json">{"GeneratedKeys":{"Entry":[{"ID":$lote_id}]}}</result>
    <param name="prov_id" sqlType="STRING" />
    <param name="arti_id" sqlType="STRING" />
    <param name="depo_id" sqlType="STRING" />
    <param name="cod_lote" sqlType="STRING" />
    <param name="fec_vencimiento" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="cantidad" sqlType="STRING" />
  </query>
  <query id="updateLoteDescontar" returnUpdatedRowCount="true" useConfig="ToolsDataSource">
    <sql>UPDATE alm.alm_lotes 
SET cantidad = cantidad - cast(:cantidad as float) 
WHERE lote_id = cast (:lote_id as integer)</sql>
    <result element="UpdatedRowCount" rowName="" useColumnNumbers="true">
      <element column="1" name="Value" xsdType="integer" />
    </result>
    <param name="cantidad" sqlType="STRING" />
    <param name="lote_id" sqlType="STRING" />
  </query>
  <query id="getPedidosXOrigen" useConfig="ToolsDataSource">
    <sql>select apm.pema_id as id_notaPedido,apm.fecha,apm.justificacion,apm.estado
from alm.alm_pedidos_materiales apm 
join alm.origen_pedido_materiales opm on opm.pema_id = apm.pema_id 
where opm.tipo = :tipo and opm.orig_id = cast(:orig_id as integer)</sql>
    <result outputType="json">{
  "pedidos": {
    "pedido": [
      {
        "id_notaPedido": "$id_notaPedido",
        "fecha": "$fecha",
        "justificacion": "$justificacion",
        "estado": "$estado"
      }
    ]
  }
}</result>
    <param name="tipo" sqlType="STRING" />
    <param name="orig_id" sqlType="STRING" />
  </query>
  <query id="getDepositosPorEmpresa" useConfig="ToolsDataSource">
    <sql>select ad.depo_id,
ad.descripcion,
ad.nombre,
u.id as user_id,
ad.empr_id,
CASE WHEN u.id IS NULL THEN '' ELSE u.first_name || ' '|| u.last_name END encargado
from alm.alm_depositos ad 
left join core.encargados_depositos ed on ed.depo_id = ad.depo_id 
left join seg.users u on u.id = ed.user_id
where u.id = cast(:user_id as integer) and ad.empr_id = cast(:empr_id as integer)</sql>
    <result outputType="json">{"depositos": {
   "deposito":[
       {
        "descripcion":"$descripcion",
        "nombre": "$nombre",
        "depo_id":"$depo_id"
       }
     ]
}
}</result>
    <param name="empr_id" sqlType="STRING" />
    <param name="user_id" sqlType="STRING" />
  </query>
  <query id="getLoteId" useConfig="ToolsDataSource">
    <sql>select lote_id 
from alm.alm_lotes
where prov_id=cast(:prov_id as integer)
and arti_id=cast(:arti_id as integer)
and depo_id=cast(:depo_id as integer)
and empr_id=cast(:empr_id as integer)
and codigo=:cod_lote</sql>
    <result outputType="json">{
 "lote": {
 "lote_id": "$lote_id"
 }
}</result>
    <param name="prov_id" sqlType="STRING" />
    <param name="arti_id" sqlType="STRING" />
    <param name="depo_id" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
    <param name="cod_lote" sqlType="STRING" />
  </query>
  <query id="getHistoricoMovimientos" useConfig="ToolsDataSource">
    <sql>select
	*
from
	alm.movimientos_historicos_vw mh ,
	(
	select
		:depo_id depo_id,
		:tipo tipo,
                :arti_id arti_id,
                :lote_id lote_id) param
where
	mh.fec_alta between to_date(:fec1, 'YYYY-MM-DD') and to_date(:fec2, 'YYYY-MM-DD')
	and mh.depo_id =
	    case when param.depo_id = 'TODOS' then mh.depo_id
		else cast(param.depo_id as integer) end
	and mh.tipo_mov = 
	    case when param.tipo = 'TODOS' then mh.tipo_mov
		else param.tipo end
        and mh.arti_id =
	    case when param.arti_id = 'TODOS' then mh.arti_id
		else cast(param.arti_id as integer) end
        and mh.lote_id =
	    case when param.lote_id = 'TODOS' then mh.lote_id
		else cast(param.lote_id as integer) end
order by fec_alta desc</sql>
    <result outputType="json">{
  "movimientos":{
    "movimiento":[
      {
        "referencia": "$referencia",
        "codigo": "$codigo",
        "descripcion": "$descripcion",
        "cantidad": "$cantidad",
        "stock_actual": "$stock_actual",
        "deposito": "$deposito",
        "fec_alta": "$fec_alta",
        "tipo_mov": "$tipo_mov",
        "lote":"$lote"
      }
    ]
  }
}</result>
    <param name="depo_id" sqlType="STRING" />
    <param name="tipo" sqlType="STRING" />
    <param name="fec1" sqlType="STRING" />
    <param name="fec2" sqlType="STRING" />
    <param name="arti_id" sqlType="STRING" />
    <param name="lote_id" sqlType="STRING" />
  </query>
  <query id="getStockXArticuloYDeposito" useConfig="ToolsDataSource">
    <sql>select
    a.arti_id,
	a.descripcion,
	a.barcode,
	t.valor tipo,
	t.tabl_id tipo_id,
	l.depo_id,
	ad.descripcion deposito,
	coalesce(sum(cantidad), 0) as cantidad,
	a.unme_id,
	t2.descripcion unidad_medida  
	from
	alm.alm_articulos a,
	alm.alm_lotes l,
	alm.alm_depositos ad, 
	core.tablas t,
	core.tablas t2,
	(
	select
		:arti_id arti_id,
		:depo_id depo_id,
		:tipo tipo) param
where
	a.tiar_id = t.tabl_id
	and t.tabl_id =
	case
		when param.tipo = 'TODOS' then t.tabl_id
		else param.tipo end
		and l.arti_id = a.arti_id
		and l.depo_id =
		case
			when param.depo_id = 'TODOS' then l.depo_id
			else cast(param.depo_id as integer) end
		and a.arti_id =
			case
				when param.arti_id = 'TODOS' then a.arti_id
				else cast(param.arti_id as integer) end
		and a.unme_id = t2.tabl_id
		and l.depo_id = ad.depo_id 
		and a.eliminado = false
group by
	a.arti_id,
	l.depo_id,
	ad.descripcion,
	t.valor, 
	t.tabl_id,
	t2.descripcion</sql>
    <result outputType="json">{
   "stock":{
      "articulo":[
         {
            "arti_id":"$arti_id",
            "barcode":"$barcode",
            "descripcion":"$descripcion",
            "tipo":"$tipo",
            "tipo_id":"$tipo_id",
            "depo_id":"$depo_id",
            "deposito":"$deposito",
            "cantidad":"$cantidad",
            "unme_id":"$unme_id",
            "unidad_medida":"$unidad_medida"
         }
      ]
   }
}</result>
    <param name="arti_id" sqlType="STRING" />
    <param name="depo_id" sqlType="STRING" />
    <param name="tipo" sqlType="STRING" />
  </query>
  <query id="getArticulosYTiposXEtapa" useConfig="ToolsDataSource">
    <sql>SELECT art.* from(
SELECT a.arti_id,
a.barcode,
a.descripcion,
'Entrada' as tipo,
a.unidad_medida,
a.es_caja,
a.cantidad_caja,
em.etap_id,
a.empr_id, 
a.eliminado 
FROM alm.alm_articulos a
JOIN prd.etapas_materiales em ON a.arti_id = em.arti_id 
UNION ALL 
SELECT a.arti_id,
a.barcode, 
a.descripcion,
'Producto' as tipo, 
a.unidad_medida, 
a.es_caja,
a.cantidad_caja,
ep.etap_id,
a.empr_id, 
a.eliminado 
FROM alm.alm_articulos a
JOIN prd.etapas_productos ep 
ON a.arti_id = ep.arti_id 
UNION ALL 
SELECT a.arti_id,
a.barcode, 
a.descripcion,
'Salida' as tipo, 
a.unidad_medida, 
a.es_caja,
a.cantidad_caja,
es.etap_id,
a.empr_id, 
a.eliminado 
FROM alm.alm_articulos a
JOIN prd.etapas_salidas es 
ON a.arti_id = es.arti_id
)art
,(SELECT :etap_id etap_id, :empr_id empr_id) param
WHERE art.etap_id = cast(param.etap_id as INTEGER) and art.empr_id = cast(param.empr_id as INTEGER) and art.eliminado = false
order by descripcion</sql>
    <result outputType="json">{
   "articulos":{
      "articulo":[
         {
            "arti_id":"$arti_id",
            "barcode":"$barcode",
            "descripcion":"$descripcion",
            "tipo":"$tipo",
            "unidad_medida":"$unidad_medida",
            "es_caja":"$es_caja",
            "cantidad_caja":"$cantidad_caja"
         }
      ]
   }
}</result>
    <param name="etap_id" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="getEstablecimientos" useConfig="ToolsDataSource">
    <sql>select e.esta_id, e.nombre, e.calle, e.altura, tl.valor as localidad, te.valor as estado, tp.valor as pais
from prd.establecimientos e
left join core.tablas tl
on tl.tabl_id = e.localidad 
left join core.tablas te 
on te.tabl_id = e.estado 
left join core.tablas tp 
on tp.tabl_id = e.pais 
where e.empr_id = cast (:empr_id as integer)
and e.eliminado = false;</sql>
    <result outputType="json">{
   "establecimientos": {
      "establecimiento": [
        {
          "esta_id": "$esta_id",
          "nombre": "$nombre",
          "calle": "$calle",
          "altura": "$altura",
          "localidad": "$localidad",
          "estado": "$estado",
          "pais": "$pais"
        }
      ]
   }
}</result>
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="getProveedores" useConfig="ToolsDataSource">
    <sql>SELECT al.*, tl.valor as localidad, te.valor as estado, tp.valor as pais
FROM alm.alm_proveedores al
left join core.tablas tl
on tl.tabl_id = al.loca_id
left join core.tablas te 
on te.tabl_id = al.esta_id 
left join core.tablas tp 
on tp.tabl_id = al.pais_id 
WHERE
al.empr_id = CAST(:empr_id as INTEGER)
AND al.eliminado = FALSE;</sql>
    <result outputType="json">{
    "proveedores": {
        "proveedor": [
            {
                "id":"$prov_id",
                "titulo":"$nombre",
                "cuit":"$cuit",
                "domicilio":"$domicilio",
                "localidad":"$localidad",
                "localidad_id":"$loca_id",
                "estado":"$estado",
                "estado_id":"$esta_id",
                "pais":"$pais",
                "pais_id":"$pais_id"
            }
        ]
    }
}</result>
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="deleteProveedor" useConfig="ToolsDataSource">
    <sql>UPDATE alm.alm_proveedores 
SET eliminado = true 
WHERE prov_id = cast(:prov_id as integer);</sql>
    <param name="prov_id" sqlType="STRING" />
  </query>
  <query id="getRecipientesXEmpresa" useConfig="ToolsDataSource">
    <sql>select
	r.reci_id,
	r.tipo as reci_tipo,
	r.nombre as reci_nombre,
	cast(r.fec_alta as date) as reci_fec_alta,
	d.depo_id,
	d.descripcion as depo_descripcion,
	e.esta_id,
	e.nombre as esta_nombre
from
	prd.recipientes r
join alm.alm_depositos d on
	d.depo_id = r.depo_id
join prd.establecimientos e on
	e.esta_id = d.esta_id
where
	r.eliminado = 0
and r.empr_id = cast(:empr_id as integer) 
order by
	r.fec_alta desc,
	d.esta_id asc,
	r.tipo asc,
	d.descripcion asc,
	r.nombre asc</sql>
    <result outputType="json">{
   "recipientes":{
      "recipiente":[
         {
            "reci_id":"$reci_id", 
            "reci_tipo":"$reci_tipo", 
            "reci_nombre":"$reci_nombre", 
            "reci_fec_alta":"$reci_fec_alta ", 
            "depo_id":"$depo_id", 
            "depo_descripcion":"$depo_descripcion", 
            "esta_id":"$esta_id", 
            "esta_nombre":"$esta_nombre"
         }
      ]
   }
}</result>
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="setProveedor" useConfig="ToolsDataSource">
    <sql>insert into alm.alm_proveedores (
	nombre, 
	cuit,
	domicilio,
        telefono,
        email,
	pais_id,
	esta_id,
	loca_id,
    empr_id )
select
  	:nombre, 
  	:cuit,
	:domicilio,
        :telefono,
        :email,
  	CASE WHEN param.pais IS NULL OR param.pais='' THEN NULL ELSE param.pais end,
  	CASE WHEN param.estado IS NULL OR param.estado ='' THEN NULL ELSE param.estado end,
  	CASE WHEN param.localidad IS NULL OR param.localidad ='' THEN NULL ELSE param.localidad end,
  	cast(:empr_id as integer)
FROM (select
  	:pais pais,
  	:estado estado,
  	:localidad localidad) param</sql>
    <param name="nombre" sqlType="STRING" />
    <param name="cuit" sqlType="STRING" />
    <param name="domicilio" sqlType="STRING" />
    <param name="telefono" sqlType="STRING" />
    <param name="email" sqlType="STRING" />
    <param name="pais" sqlType="STRING" />
    <param name="estado" sqlType="STRING" />
    <param name="localidad" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="updateProveedor" useConfig="ToolsDataSource">
    <sql>UPDATE alm.alm_proveedores
set nombre = :nombre,
    cuit = :cuit,
    domicilio = :domicilio,
    telefono = :telefono,
    email = :email,
    pais_id = CASE WHEN param.pais IS NULL OR param.pais='' THEN NULL ELSE param.pais end,
    esta_id = CASE WHEN param.estado IS NULL OR param.estado='' THEN NULL ELSE param.estado end,
    loca_id = CASE WHEN param.localidad IS NULL OR param.localidad ='' THEN NULL ELSE param.localidad end
FROM (select
  	:pais pais,
  	:estado estado,
  	:localidad localidad) param
where prov_id = CAST(:prov_id as integer)</sql>
    <param name="nombre" sqlType="STRING" />
    <param name="cuit" sqlType="STRING" />
    <param name="domicilio" sqlType="STRING" />
    <param name="telefono" sqlType="STRING" />
    <param name="email" sqlType="STRING" />
    <param name="localidad" sqlType="STRING" />
    <param name="estado" sqlType="STRING" />
    <param name="pais" sqlType="STRING" />
    <param name="prov_id" sqlType="STRING" />
  </query>
  <query id="validaArticulo" useConfig="ToolsDataSource">
    <sql>select case when exists 
(select true from alm.alm_articulos aa where upper(aa.barcode) like upper(:barcode)
and aa.empr_id = cast(:empr_id as integer)
) then 'true' else 'false'
end</sql>
    <result outputType="json">{
    "resultado" : {
        "existe": "$case"
    }
}</result>
    <param name="barcode" sqlType="STRING" />
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="getStock" useConfig="ToolsDataSource">
    <sql>select 
aa.descripcion as artdescription,
aa.barcode as artbarcode,
T.descripcion as arttype,
al.fec_alta as fecha_nueva,
T1.descripcion as un_medida,
al.*,
alm.alm_depositos.depo_id,
alm.alm_depositos.descripcion as depositodescrip,
prd.recipientes.reci_id,
prd.recipientes.nombre as nom_reci
from alm.alm_articulos aa
JOIN alm.alm_lotes al ON aa.arti_id = al.arti_id AND al.cantidad != 0
JOIN alm.alm_depositos ON al.depo_id = alm_depositos.depo_id
LEFT JOIN core.tablas T ON T.tabl_id = aa.tiar_id 
LEFT JOIN core.tablas T1 ON T1.tabl_id = aa.unme_id 
LEFT JOIN prd.lotes ON al.batch_id = prd.lotes.batch_id
LEFT JOIN prd.recipientes ON prd.lotes.reci_id = prd.recipientes.reci_id
WHERE al.empr_id = cast(:empr_id as integer) and aa.eliminado != true</sql>
    <result outputType="json">{
    "lotes": {
        "stock": [
            {
                "artdescription": "$artdescription",
                "artbarcode": "$artbarcode",
                "arttype": "$arttype",
                "fecha_nueva": "$fecha_nueva",
                "un_medida": "$un_medida",
                "lote_id": "$lote_id",
                "prov_id": "$prov_id",
                "arti_id": "$arti_id",
                "depo_id": "$depo_id",
                "codigo": "$codigo",
                "cantidad": "$cantidad",
                "estado": "$estado",
                "fec_vencimiento": "$fec_vencimiento",
                "fec_alta": "$fec_alta",
                "batch_id": "$batch_id",
                "depositodescrip": "$depositodescrip",
                "reci_id": "$reci_id",
                "nom_reci": "$nom_reci"
            }
        ]
    }
}</result>
    <param name="empr_id" sqlType="STRING" />
  </query>
  <query id="setDetaNotaPedido" useConfig="ToolsDataSource">
    <sql>insert into alm.alm_deta_pedidos_materiales(pema_id, arti_id, cantidad)values(cast(:pema_id as integer),cast(:arti_id as integer), cast(:cantidad as integer))</sql>
    <param name="pema_id" sqlType="STRING" />
    <param name="arti_id" sqlType="STRING" />
    <param name="cantidad" sqlType="STRING" />
  </query>
  <query id="setDetallePedidoConReceta" useConfig="ToolsDataSource">
    <sql>INSERT INTO alm.alm_deta_pedidos_materiales
(cantidad, pema_id, arti_id, cantidad_receta, receta, empaque)
select
  	cast(:cantidad as integer), 
  	cast(:pema_id as integer),
	cast(:arti_id as integer),
    cast(:cantidad_receta as integer),
  	CASE WHEN param.receta IS NULL OR param.receta = '' THEN NULL ELSE cast(param.receta as integer) end,
  	case when parametro.empaque IS NULL OR parametro.empaque = '' THEN NULL ELSE cast(parametro.empaque as integer) end
	from (select :receta receta) param, (select :empaque empaque) parametro</sql>
    <param name="cantidad" sqlType="STRING" />
    <param name="pema_id" sqlType="STRING" />
    <param name="arti_id" sqlType="STRING" />
    <param name="receta" sqlType="STRING" />
    <param name="cantidad_receta" sqlType="STRING" />
    <param name="empaque" sqlType="STRING" />
  </query>
  <query id="eliminaDetallesPedidoAnterior" useConfig="ToolsDataSource">
    <sql>UPDATE alm.alm_deta_pedidos_materiales 
SET eliminado = true
WHERE pema_id = cast(:pema_id as int8)</sql>
    <param name="pema_id" sqlType="STRING" />
  </query>
  <query id="updateJustificacion" useConfig="ToolsDataSource">
    <sql>UPDATE alm.alm_pedidos_materiales 
SET justificacion = :justificacion
WHERE  pema_id = cast(:pema_id as int8)</sql>
    <param name="justificacion" sqlType="STRING" />
    <param name="pema_id" sqlType="STRING" />
  </query>
  <query id="updateArticuloInte" useConfig="ToolsDataSource">
    <sql>update
	alm.alm_articulos
set
	barcode = :barcode ,
	descripcion = :descripcion,
	es_caja = cast(:es_caja as boolean)  ,
	cantidad_caja = cast(:cantidad_caja as float) ,
	punto_pedido = cast(:punto_pedido as float) ,
	estado = :estado ,
	es_loteado = cast(:es_loteado as boolean),
	tiar_id = int.traducir_valor_tabla_in(param.empr_id,'tipo_articulo',param.tiar_id),
	unme_id = int.traducir_valor_tabla_in(param.empr_id,'unidades_medida',param.unme_id)
from (select cast(:empr_id as integer) empr_id, :unme_id unme_id, :tiar_id tiar_id) param
where
	inte_id= :inte_id
</sql>
    <param name="inte_id" paramType="SCALAR" sqlType="STRING" />
    <param name="barcode" paramType="SCALAR" sqlType="STRING" />
    <param name="descripcion" paramType="SCALAR" sqlType="STRING" />
    <param name="es_caja" paramType="SCALAR" sqlType="STRING" />
    <param name="cantidad_caja" paramType="SCALAR" sqlType="STRING" />
    <param name="punto_pedido" paramType="SCALAR" sqlType="STRING" />
    <param name="estado" paramType="SCALAR" sqlType="STRING" />
    <param name="es_loteado" paramType="SCALAR" sqlType="STRING" />
        <param name="empr_id" paramType="SCALAR" sqlType="STRING" />
    
    <param name="tiar_id" paramType="SCALAR" sqlType="STRING" />
    <param name="unme_id" paramType="SCALAR" sqlType="STRING" />
    <param name="inte_id" paramType="SCALAR" sqlType="STRING" />
  </query>
  <query id="deleteArticuloInte" useConfig="ToolsDataSource">
    <sql>update
	alm.alm_articulos
set
	eliminado = true
where
	inte_id= :inte_id
</sql>
    <param name="inte_id" paramType="SCALAR" sqlType="STRING" />
  </query>
  <resource method="PUT" path="/articulo/inte_id">
    <description />
    <call-query href="updateArticuloInte">
      <with-param name="inte_id" query-param="inte_id" />
      <with-param name="barcode" query-param="barcode" />
      <with-param name="descripcion" query-param="descripcion" />
      <with-param name="es_caja" query-param="es_caja" />
      <with-param name="cantidad_caja" query-param="cantidad_caja" />
      <with-param name="punto_pedido" query-param="punto_pedido" />
      <with-param name="estado" query-param="estado" />
      <with-param name="es_loteado" query-param="es_loteado" />
            <with-param name="empr_id" query-param="empr_id" />
      
      <with-param name="tiar_id" query-param="tiar_id" />
      <with-param name="unme_id" query-param="unme_id" />
      <with-param name="inte_id" query-param="inte_id" />
    </call-query>
  </resource>
  <resource method="DELETE" path="/articulo/inte_id">
    <description />
    <call-query href="deleteArticuloInte">
      <with-param name="inte_id" query-param="inte_id" />
    </call-query>
  </resource>
</data>
